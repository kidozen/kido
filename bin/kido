#!/usr/bin/env node


/**
 * module dependencies
 */

 var path = require('path'),
 fs   = require('fs'),
 program = require('commander'),
 colors = require('colors'),
 async = require ('async');


/**
 * module variables
 */

 var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../lib'),
 app  = require(lib),
 home = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],
 configFile = path.join(home, 'kido.config');

/**
 * init
 */

 program
 .version(require('../package.json').version)
 .description('Kidozen platform command line tool for development.');


 /** Helper functions **/


/**
 * exits the process despite of any listeners being attached.
 * @api private
 */

 function exit() {
    process.exit();
}


/**
 * gets users's configuration. if the file does not exist yet
 * creates an empty one.
 * @api private
 */

 function getConfig () {
    if (!fs.existsSync(configFile)) {
        fs.writeFileSync(configFile, '{"logins":{}}', 'utf8');
    }
    return JSON.parse(fs.readFileSync(configFile, 'utf8'));
}


/**
 * sets the config on the user's config file.
 * @api private
 */

 function setConfig ( cnf ) {
    fs.writeFileSync(configFile, JSON.stringify(cnf, 0, 2), 'utf8');
}


/**
 * sets the config to the current folder's application.
 * @api private
 */

 function setAppConfig( cnf ) {

    var filePath = path.join(process.cwd(), 'kidozen.config'),
    config   = JSON.stringify(cnf, 0, 2);
    fs.writeFileSync(filePath, config, 'utf8');
}


/**
 * get's the credentials for the specified hosting.
 * if no hosting is provided, then it looks for the default one.
 * @api private
 */
 function getCredentials(domain) {

    var cnf = getConfig();

    domain = domain || cnf.hosting;

    if (!domain) {
        showError('No hosting selected. use `kido hosting`');
        exit();
    }

    var credentials = cnf.logins[domain];

    if (!credentials) {
        showError('Could not find credentials. use `kido hosting`');
        exit();
    }

    return {
        hosting: domain,
        username: credentials.username,
        password: credentials.password,
        ip: credentials.ip
    };
}

/**
 * Unified error display method.
 **/
 function showError(message) {
    console.log('Error! '.red + message);
}


/**
 * get's the current folder's application configuration. if no file was found
 * but a name and hosting was provided, prompt the user whehter he wants to
 * create the file.
 * @api
 */

 function getAppConfig( name, hosting, cb ) {

    var configPath = path.join(process.cwd(), 'kidozen.config'),
    prompt = true;

    if (!name) {
        if (!fs.existsSync(configPath)) {
            console.error('provide app name');
            exit();
        }

        var config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

        if (!config || !config.name) {
            console.error('provide app name');
            exit();
        }

        //config was saved. no need to ask again.
        prompt = false;
        name = config.name;
        hosting = config.hosting;
    }

    var credentials = getCredentials(hosting),
    result = { name: name, credentials: credentials };

    if (prompt) {
        program.confirm('Save app configuration to current folder? ', function ( yes ) {
            if (yes) {
                setAppConfig({ name: name, hosting: hosting });
            }

            cb(null, result);
        });
    } else {
        cb(null, result);
    }
}

function getIpByName(api, ipName, cb) {
    api.getIdentityProviders(function (err, ipList) {
        if (err || !ipList) {

            var message = err ? err.message : 'Couldn\'t find any identity provider.';

            cb('Unable to authenticate: ' + message);
            return;
        }
        var matchedIps = ipList.filter(function(ip){
            return ip.name.toLowerCase() == (ipName || "").toLowerCase();
        });
        if (matchedIps.length < 1){
            return cb("Identity Provider '"+ipName+"' is not available.");
        }
        return cb(null, matchedIps[0]);
    });
}


function chooseIp(api, cb) {
    api.getIdentityProviders(function (err, ipList) {
        if (err || !ipList) {

            var message = err ? err.message : 'Couldn\'t find any identity provider.';

            cb('Unable to authenticate: ' + message);
            return;
        }

        if (ipList.length == 1) {
            cb(null, ipList[0]);
            return;
        };

        console.log('Choose your identity provider'.cyan);

        program.choose(ipList.map(function(e) { return e.name }), function(i) {
            cb(null, ipList[i]);
        });
    });
}

function enterCredentials(cb) {
    program.prompt('user name: ', function ( usr ) {

        if (!usr) {
            cb('You must provide a user name');
            exit();
        }

        program.password('password: ', '*', function (pwd) {

            if (!pwd) {
                cb('You must provide a password');
                exit();
            }

            cb(null, { username: usr, password: pwd });
        })
    });
}

/** program commands **/


/**
 * `kido hosting domain` - will save the credentials for the specified domain
 * in the user's folder.
 * @api
 */

 program
 .command('hosting <domain> [ipName] [username] [password]')
 .description('Saves the hosting configuration')
 .action(function( domain, ipName, username, password ) {

    var api = app(domain);

    async.waterfall([
        function(callback){
            if (!ipName){
                chooseIp(api, callback);                
            } else {
                getIpByName(api,ipName,callback);
            }
        },
        function(ip, callback){
            if (!username || !password){
                enterCredentials(function(err, credentials){
                    if (err) return callback(err);
                    credentials.ip = ip;
                    callback(null, credentials);
                });
            } else {
                var creds = {
                    username: username,
                    password: password,
                    ip: ip
                };
                callback(null,creds);
            }
        },
        function(credentials, callback){            
            api.login(credentials, function(err) {
                if (err) { 
                    callback(err);
                }

                console.info('');
                console.info('Login successfull!'.green);
  
                //save credentials.
                var cnf = getConfig();

                //set default hosting.
                if (!cnf.hosting) {
                    cnf.hosting = domain;
                }

                cnf.logins[domain] = credentials;

                //save config.
                setConfig(cnf);

                console.info('');
                console.info('Hosting saved in configuration.');
                console.info('');

                callback(null);
            });
        }
    ], function (err) {
        if (err) {
            showError(err.message || err);
            exit();
        }  
    });
});


// /**
//  * `kido app-list [hosting]` - will list the names of all the apps on the
//  * hosting.
//  * @api public
//  */

program
    .command('app-list [hosting]')
    .description('List all the apps in the hosting')
    .action(function ( domain ) {

        var credentials = getCredentials(domain);

        console.info('Getting list of apps from: ', credentials.hosting);

        var api = app(credentials.hosting);

        api.apps(credentials, function ( err, apps ) {
            if (err) {
                showError(err.message || err);
                exit();
            }

            for(var i in apps) {
                console.info('- ', apps[i].name);
            }
        });
    });


/**
 * `kido app-create <name> [hosting] - creates an app with the provided name
 * in the specified hosting (or the default one).
 * @api public
 */

program
    .command('app-create <name> [hosting]')
    .description('Creates an app with <name> in the [hosting]')
    .action(function (name, hosting) {

        var credentials = getCredentials(hosting);

        console.info('Creating app ', name.cyan, ' in ', credentials.hosting.cyan);

        var api = app(credentials.hosting);

        api.createApp(credentials, name, function (err) {

                if (err) {
                    showError(err.message || err);
                    exit();
                }

                console.info('');
                console.info('Application successfully created!'.green);
                console.info('');

                program.prompt('Save app configuration to current folder? ', function ( yes ) {

                    if (yes) {
                        setAppConfig({ name: name, hosting: hosting });
                    }

                    exit();
                });
            });
    });


 /**
 * `kido app-deploy [name] [hosting] - will deploy the current folder to the
 * app `[name]` in the hosting `[hosting]`. If no name or hosting is provided,
 * it will look into the current folder to see if the config has been saved and
 * use that instead. If only the name is provided, it will try to use the
 * default hosting.
 * @api public
 */

program
    .command('app-deploy [name] [hosting]')
    .description('Deploy current folder to the [name] app in [hosting]')
    .action(function (name, hosting) {

        getAppConfig(name, hosting, function(err, conf) {

            console.info('Deploying current folder to app ', conf.name.cyan, ' in ', conf.credentials.hosting.cyan);

            var options = { hosting: conf.credentials.hosting };
            
            if (fs.exists('.kidoignore')) {
                var ignore = fs.readFileSync('.kidoignore') || "";
                options.kidoIgnore = ignore.split('\n');
            }
            
            var api = app(options);
            
            api.on('skipped', function (item) {
                console.info("Skipping file: " + item);
            });
            
            api.deployApp(conf.credentials, conf.name, process.cwd(), function (err) {
                if (err) {
                    showError(err.message || err);
                    exit();
                }

                console.info('');
                console.info('Application deployed successfully!'.green);
                console.info('');
                exit();
            });       
        });
    });


/**
 * `kido app-run [name] [hosting] - similar to deploy, but instead of sending
 * the files to hosting, it opens a webserver and serves the local files instead.
 * @api public
 */

program
    .command('app-run [name] [hosting]')
    .description('Runs files on local folder and redirects calls to backend services')
    .action(function ( name, hosting ) {

        getAppConfig(name, hosting, function (err, conf) {

            console.info('Running development emulator for app ', conf.name.cyan, ' in ', conf.credentials.hosting.cyan);

            var api = app(conf.credentials.hosting);        

            api.emulate(conf.credentials, conf.name, process.cwd(), function ( err ) {

                if (err) {
                    showError(err);
                    exit();
                }

                console.info('');
                console.info('You can now open http://localhost:3000 in your browser');
                console.info('Backend calls are being directed to https://' + conf.name + '.' + conf.credentials.hosting);
                console.info('');
            });
        });
    });

/**
 * `kido app-crash [iosapp] [name] [hosting] - sends iOS dSym data to kidozen
 * @api public
 */
program
    .command('app-crash <dSymPath> <name> [hosting]')
    .description('\nUpload iOS symbols file (dSym) to Kidozen application specified in <name> parameter.')
    .action(function ( dSymPath, name, domain ) {
            var settings = getCredentials(domain);            
            var api = app( { hosting: settings.hosting } );

            console.info('Processing .dSym to to upload.');

            api.iOSSymbols(settings, dSymPath, name , function(err, result) {
                if (err) {
                    showError(err);
                    exit();
                }
                console.info('');
                console.info('The .dSym was uploaded to Kidozen platform.');
                console.info('');
            });
    });

/**
 * `kido apk-crash [iosapp] [name] [appVersion] [appVersionName] [hosting] - sends Android progard file
 * @api public
 */
program
    .command('apk-crash <proguardPath> <packageName> <appVersion> <appVersionName> <name> [hosting]')
    .description('\nUpload Android proguard information. You must specify the package name, version and version name, to Kidozen application specified in <name> parameter.')
    .action(function ( proguardPath, packageName, appVersion, appVersionName, name, domain ) {
            var settings = getCredentials(domain);            
            var api = app( { hosting: settings.hosting } );

            console.info('Processing progard folder to to upload.');

            api.proguardMapping(settings, proguardPath, packageName, appVersion, appVersionName, name , function(err, result) {
                if (err) {
                    showError(err);
                    exit();
                }
                console.info('');
                console.info('The map file was uploaded to Kidozen platform.');
                console.info('');
            });
    });



program
  .command('*')
  .action(function(){
    program.help();
  });


program.parse(process.argv);

if (process.argv.length === 2) {

    program.help();

}
